pub fun erase(erase_arr, index){
    unsafe $unset {nameof erase_arr}[{index}]$
    unsafe ${nameof erase_arr}=("\$\{{nameof erase_arr}[@]}")$
    return erase_arr
}

#[allow_camel_case]
pub fun isArray(arr): Bool {
    return (
        arr is [Num]  or
        arr is [Text] or
        arr is [Bool] or
        arr is [Null]
    )
    // why is [Null] a thing
}

// create an array of some specified size and set all its elements to init
pub fun array(size, init) {
    let arr = [init] // sets arr to be the same type as init
    arr = erase(arr, 0) // immediately remove init in case size<=0

    loop _ in 0..size {arr += [init]}

    return arr
}

pub fun subarray(arr, start, end) {
    // assume arr is always an array
    let count = end - start + 1
    if count < 0: count = 0
    silent ${nameof arr}=("\$\{{nameof arr}[@]:({start}):({count})}")$?
    return arr
}